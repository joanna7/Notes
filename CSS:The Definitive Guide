CSS:The Definitive Guide
CSS权威指南

第1章 CSS和文档
	1.
	h1{
		color: maroon;
		font: italic 2em Times,serif;
		text-decoration: underline;
		background: yellow;
	}
	2.每个元素生成一个box
	3.元素的两种形式：替换和非替换
		替换：img(图片) input(单选钮 复选框活文本是输入框)
		非替换：由用户代理(浏览器)在元素本身生成的框中显示
	4.元素两种基本类型：块级block-level  行内inline-level
		block-level 生成一个元素框 在元素框之前和之后产生分隔符(特例：列表元素会额外生成一个标记符，如无序列表中的圆点，有序列表中的数字)
		inline-level 在文本行内生成元素框，不会产生分隔符(a strong em)
		注意：HTML和XHTML中 块级元素不能继承自行内元素(即不能嵌套在行内元素中)，但在CSS中，对于显示角色如何嵌套不存在任何限制
			display例子
			<p>this is a paragraph with <em>an inline element</em> within it.</p>
			p{
				display: inline;
			}
			em{
				display: block;
			}
			em可以继承p，但是反过来不行。行内元素可以继承块元素，块元素不可以继承行内元素
			XHTML中不合法的结构：<em><p>this is a paragraph improperly enclosed by an inline element.</p></em>
	5.Link标记
		<link rel="stylesheet" type="text/css" href="sheet1.css" media="all"/>
		<link rel="stylesheet" type="taxt/css" href="visual-sheet.css" media="screen,projection"/>
		media类型：常用三种：all screen print
		           非常用：aural语音合成 braille embossed handheld手持设备 projection投影设备 tty固定间距设备 tv
		链接到两个CSS样式表,合并它们的样式表，全部应用到文档：
		<link rel="stylesheet" type="text/css" href="basic.css"/>
		<link rel="stylesheet" type="text/css" href="splash.css"/>
		例子：<link rel="stylesheet" type="text/css" href="basic.css"/>
			  <link rel="stylesheet" type="text/css" href="splash.css"/>
			  <p class="al">this paragraph will be gray only if styles from the stylesheet 'basic.css' are applied.</p>
			  <p class="bl">this paragraph will be gray only if styles from the stylesheet 'splash.css' are applied.</p>
			  此处没有link的title属性
	6.候选样式表
		(1)alternate style sheet
			rel 属性改为alternate stylesheet,link元素的title属性产生一个候选样式列表
			<link rel="stylesheet" type="text/css" href="sheet1.css" title="Default"/>
			<link rel="alternate stylesheet" type="text/css" href="bigtext.css" title=" Big Text"/>
			<link rel="alternate stylesheet" type="text/css" href="zany.css" title="Crazy colors!"/>
			可以在浏览器中根据title切换样式表
		(2)title和media的组合
			<link rel="stylesheet" type="text/css" href="sheet1.css" title="Default" media="screen"/>
			<link rel="stylesheet" type="text/css" href="print-sheet1.css" title="Default" media="print"/>
			<link rel="alternate stylesheet" type="text/css" href="bigtext.css" title="Big Text" media="screen"/>
			<link rel="alternate stylesheet" type="text/css" href="print-bigtext.css" title="Big Text" media="print"/>
			首选样式表 永久样式表（没有为样式表指定title）
	7.style元素
		<style type="text/css" media="all"></style> 
		被称为文档样式表document style sheet，或者嵌套样式表embedded style sheet
		(1)@import指令
			@import url(sheet2.css) @import出现在style容器里必须放在其他CSS规则之前，否则没有作用。
			<style type="text/css">@import url(styles.css)
			h1{color: gray;}
			</style>
			所有规则都会显示：
				@import url(sheet2.css);
				@import url(blueworld.css);
				@import url(zany.css);
			媒体：
				@import url(sheet2.css) all;
				@import url(blueworld.css) screen;
				@import url(zany.css) projection,print;
			一个外部样式表要引用其他外部样式表时只能用@import，不可以用link
			@import url(http://example.org/library/layout.css);
			@import url(basic-text.css);
			@import url(printer.css) print;
			body {color:red;}
			h1 {color:blue;}
			如果@import出现在其他规则之后，兼容代理就会将其忽略
		(2)向后可访问性
			浏览器可能无法识别<style></style>,但可识别声明：<!--和-->
			做如此操作则会同时忽略style和声明：
			<style type="text/css">
			<!--@import url(sheet2.css);
			h1{color:maroon;}
			body{background:yellow;}
			-->
			</style>
		(3)CSS注释
			/*this is a css1 comment*/
			可以跨多行，不可以嵌套
	8.内联样式
		inline style
		<p style="color:gray;">The most wonderful of all breakfast foods is the waffle...</p>
		除了在body外部出现的标记，style属性可以与任何其他HTML相关联
		内联样式表只能放一个声明块，不能放样式表，不可以放@import,
第2章 选择器
	1.基本规则
		<h2><font color="gray">this is h2 text</font></h2>
		h2{
			color: gray;
		}
		h2{
			color: silver;
		}
		每个规则都是：选择器和声明块组成。声明由属性和值组成。
		h1{
			color: red;
			background: yellow;
		}
		值：要么是一个关键字，要么是可选关键字的一个列表，关键字之间用空格分隔
		brain-size: 2cm; /*unknown property*/
		color: ultraviolet; /*unknown value*/
		p{
			font: medium Helvetica;
		} 
		用/区分关键字的特例：h2{font: large/150% sans-serif;}		
	2.元素选择器
		XML中：什么都可以是选择器 QUOTE{color: gray;}
								  BIB{color: red;}
								  BOOKTITLE{color: purple;}
								  MYElement{color: red;}
		HTML中：选择器是HTML元素  html{color: red;}
								  h1{color: black;}
								  h2{color: silver;}
	3.分组
		(1)选择器分组
		 h2,p{color: gray;} 规则中两个不同的选择器要用逗号
		 body,table,th,td,h1,h2,h3,h4,p,pre,strong,em,b,i,{color: gray;}
		 /* group 1*/
		 h1{color: silver; background: white;}
		 h2{color: silver; background: gray;}
		 h3{color: white; background: gray}
		 h4{color: silver; background: white;}
		 b{color: gray; background: white;}
		 /* group 2*/
		 h1,h2,h4{color: silver;}
         h3{color: white;}
		 b{color: gray;}
		 h1,h4,b{background: white;}
		 h2,h3{background: gray;}
		 /* group 3*/
		 h1,h4{color: silver; background: white;}
		 h2,h3{background: gray;}
		 h2{color: silver;}
		 h3{color: white;}
		 b{color: gray; background: white;}
		(2)通配器选择
		 *{color: red;}
		(3)声明分组
		 h1{
		 	font: 18px Helvetica;
		 	color: purple;
		 	background: aqua;
		 }
		(4)组合选择器和声明的分组
		 h1,h2,h3,h4,h5,h6{
		 	color: gray;
		 	background: white;
		 	padding: 0.5em;
		 	border: 1px solid black;
		 	font-family: Charcoal,sans-serif;
		 	}
 	4.类选择器和ID选择器
 	 	都是区分大小写的
 		(1)类选择器
 		 <p class="warning">1</p>
 		 <p>2<span class="warning">3</span>4</p>
 		 *.warning{font-weight: bold;}
 		 p.warining{font-weight: bold;} class属性包含词warning的所有段落
 		 span.warning{font-style: italic;} 警告span会变成斜体
 		 .warning{font-style: italic;} 所有警告都会变成斜体
 		 span.warning{font-weight: bold;}警告span会变成粗体
 		(2)多类选择器
 		 class中包含词列表
 		 <p class="warning urgent"></p> 类名用空格分隔
 		 <span class="urgent warning"></span>
 		 两个类的顺序无关紧要
 		 .warning{font-weight: bold;}
 		 .urgent{font-style: italic;}
 		 .warning.urgent{background: silver;}
 		 例子：p.warning.help{background: red;}
 		 	   能匹配<p class="urgent warning help"></p>
 		 	         <p class="warning help"></p>
 		 	         <p class="help warning"></p>
 		 	   不能匹配：<p class="warning"></p>
 		 	             <p class="help"></p>
 		(3)ID选择器
 		 *#first-para{font-weight: bold;}
 		 #first-para{font-weight: bold;}
 		 ID值唯一
 		 ID选择器不能结合使用，不允许有以空格分隔的词列表
 	5.属性选择器
 		(1)简单属性选择
 		 只是选择class属性，值不限制
 		 h1[class]{color: silver;}
 		 <h1 class="hoopla">hello</h1>
 		 <h1 class="severe">severe</h1>
 		 <h1 class="fancy">fancy</h1>
 		 所有moons属性的所有planet元素
 		 planet[moons]{font-weight: bold;}
 		 img[alt]{border: 3px solid red;}
 		 *[title]{font-weight: bold;}
 		 a[href][title]{font-weight: bold;}同时将有href和title属性的HTML超链接文本设置为粗体
 		 <a href="http://www.w3.org/" title="w3c home">w3c</a>
 		(2)根据具体属性值选择
 		 planet[moons="1"]{font-weight: bold;}
 		 <planet>venus</planet>
 		 <planet moons="1"></planet>
 		 a[href="http://www.w3.org/"][title="w3c home"]{font-size" 200%;}
 		 特例：值本身就有一个空格
 		 <planet type="barren rocky">mercury</planet>
 		 唯一表达方式 planet[type="barren rocky"]{font-weight: bold;}
 		 完全串匹配：<p class="urgent warning">when the</p>
 		            p[class="urgent warning"]{font-weight: bold;}urgent在前，warning在后，有一个空格
 		(3)根据部分属性值选择
 		 <p class="urgent warning">when the</p>
 		 class属性中包含warning
 		 p[class~=:"warning"]{font-weight: bold;}
 		 ~=包含，不仅仅是用于class，可以用于任何属性
 		 p.warning和p[class~="warning"]应用到HTML中是等价的
 		 img[title~="Figure"]border{1px solid gray;}
                 子串匹配属性选择器：也可用于IE7
 		 <span class="barren rocky">mercury</span>
 		 <span class="cloudy barren">venus</span>
 		 <span class="life-bearing cloudy">earth</span>
 		 span[class*="cloud"]{font-style: italic;}
 		 span[class^="bar"]{background: silver;}
 		 span[class$="y"]{font-weight: bold;}
 		 a[href*="oreilly"]{font-weight: bold;}
 		 img[src*"space"]{border: 5px solid red;}
 		(4)特定属性选择类型
 		 *[lang|="en"]{color: white;}
 		 lang属性等于en或者以en-开头的所有元素
 		 包括：<h1 lang="en">hello!</h1>
 		 	   <p lang="en-us">greenting</p>
 		 	   <div lang="en-au">yeah</div>
 		 不包括：<p lang="fr">bonjure</p>
 		 		 <h4 lang="cy-en">jon</h4>
 		 一般[att|"val"]可以用于任何属性及其值
 		 如果图片名为figure-1.gif,figure-2.gif,则
 		 img[src|="figure"]{border: 1px solid gray;}
 	6.使用文档结构
 		(1)父子关系
 		(2)后代选择器/包含选择器/上下文选择器
 		 h1 em{color: gray;} 空格是结合符 作为h1元素后代的任何em元素
 		 ul ol ul em{color: gray;}
 		 空格两边都是元素 区别于p.warning{color: gray;}warning是值
 		 td.sidebar{background: blue;}
 		 td.main{background: white;}
 		 td.sidebar a:link{color: white;}
 		 td.main a:link{color: blue;}
 		 blockquote b,p b{color:gray;}
 		 特点：ul em{color: gray;} 从所有的ul元素中继承em元素 不管em元素嵌套多深
 		(3)子元素
 		 > 子结合符
 		 <h1>this is<strong>very</strong>important</h1>
 		 <h1>this is<em>really<strong>very</strong><em>important.</h1>
 		 h1>strong 子结合符两边可以有空格 h1 > strong
 		 table.summary td>p  
 		(4)兄弟元素
 		 + 相邻兄弟结合符 两边可以有空格
 		 h1 + p{margin-top: 0;}设置紧接在h1元素后的p元素 并且h1和p有共同的父元素
 		 <div>
 		 	<ol>
 		  		<li></li>
 		  		<li></li>
 		  		<li></li>
 		 	</ol>
 		 	<ul>
 		 		<li></li>
 		  		<li></li>
 		  		<li></li>
 		 	</ul>
 		 </div>
 		 li + li{font-weight: bold;} 指ol和ul中的第二个和第三个li
 		 html > body table + ul{margin-top:1.5em}
	7.伪类和伪元素
 		(1)伪类选择器
 		 a:visited{color: red;}
 		(2)链接伪类
 		 :link 未访问
 		 :visited 已访问
 		 a{color: blue;}
 		 a:visited{color: red;}
 		 a:link{color: blue;}
 		 a:visited{color: red;}
 		 未访问是紫色，访问过的是银色，在HTML3.2中定义：
 		 	<body link="purple" vlink="silver"></body>
 		 在CSS中定义：
 		 	a:link{color: purple;}
 		 	a:visited{color: silver;}
 		 	a:visited{color: silver;text-decoration: line-through;font-style: italic;}
 		 <a href="http://www.baidu.com/">baidu</a>
 		 <a href="http://www.google.com" class="external">google</a>
 		 a.external:link,a.external:visited{color: maroon;}
 		 ID选择器：
 		 	a#footer-copyright:link{font-weight: bold;}
 		 	a#footer-copyright:visited{font-weight: normal;}
 		(3)动态伪类
 			可以应用到任何元素
 			:focus
 			:hover
 			:active
 			顺序：link visited focus hover active
 			input:focus{background: silver;font-weight: bold;}
 			body *:hover{background: yellow;}
 		(4)动态样式的实际问题
 			a:link,a:visited{font-size: 13px;}
 			a:hover{font-size: 20px;}
 		 1"选择第一个子元素
 		 :first-child
 			p:first-child{font-weight: bold;} 作为某元素的第一个子元素的所有p元素
 			li:first-child{text-transform: uppercase;} 作为某元素的第一个子元素的所有li元素
 			em:first-child
 		 2"根据语言选择
 		  *lang(fr){font-style: italic;}
 		 3"结合伪类
 		  a:link:hover{color: red;}
 		  a:visited:hover{color: maroon;}
 		  a:hover:link{color: red;}
 		  a:hover:visited{color: maroon;}顺序不影响
 		  a:link:hover:lang(de){color: gray;}
 		  a:link:visited:lang(de){color: silver;}
 		(5)伪元素选择器
 		 1"首字母样式
 		  p:first-letter{color: red;} 每一段的第一个字母设置为红色
 		  h2:first-letter{font-size: 200%;}
 		 2"第一行样式
 		  p:first-line{color: purple;}
 		  first-letter和first-line 只能用于块元素 不能用于行内元素
 		 3"之前和之后样式
 		  h2:before{content:"{}";color: silver;}
 		  body:after{content:"the end";color: silver;}
 		  插入都是incline元素

第3章 结构和层叠
	1.特殊性
	 继承：一个元素向其后代元素传递属性值所采用的机制
	 层叠：继承，声明的特殊性和来源
	 0,0,0,0,
	2.声明和特殊性
	3.通配符选择器特殊性 0,0,0,0
	 div p{color: black;} 0,0,0,2
	 *{color: gray;} 0,0,0,0
	4.ID和属性选择器的特殊性
	 html>body table tr[id="totals"] td ul>li{color: maroon;}
	 li#answer{color: navy;}
	 #answer 0,1,0,0
	 [id="totals"] 0,0,1,0
	5.内联样式特殊性
	 h1{color: red;} 0,0,0,1
	 <h1 style="color: green;">the party</h1> 1,0,0,0
	 内联属性级别最高
	 h1#meadow{color: red;} 0,1,0,0
	 <h1 id="meadow" style="color: green;">the party</h1> 1,0,0,0
	6.重要性
	 结束；之前插入 !important
	 p.dark{color: #333 !important;background:white;}
	 p.dark{color: #333 !important;background:white !important;}
	 p.light{color: yellow;font: smaller Times,serif !important;}
	7.继承
	 <h1>meerkat <em>central</em></h1>
	 h1{color: gray;}
	 ul{color: gray;}
	 border不会继承
	 0特殊性比无特殊性要强：
	  *{color: gray;}
	  h1#page-title{color: black;}
	  *适用于所有元素，p显示为gray,继承的h1属性要弱于0特殊性。继承属性是吴特殊性。
	  #toolbar{color: black;background: white;}
	  #toolbar a:link{color: black;}
	 8.层叠
	  h1{color: red;}
	  h1{color: blue;}
	  (1)按权重和来源
	   p{color: gray !important;}
	   <p style="color: black;">well,<em>hello</em>there!</p>
	   p em{color: black;} /*author's style sheet*/
	   p em{color: yellow;} /*reader's style sheet*/
	   显示为black
	   p em{color: black !important;} /*author's style sheet*/
	   p em{color: yellow !important;} /*reader's style sheet*/
	   显示为yellow
	  (2)特殊性排序
	   0,0,0,0
	  (3)顺序排序
	   显示较后的：h1{color: red;}
	   			   h1{color: blue;}
	   包含的规则胜出：
	    p em{color: purple;} /*from imported style sheet*/
	    p em{color: gray;} /*rule contained within the document*/
	    :link{color: blue;}
	    :visited{color: purple;}
	    :hover{color: red;}
	    :active{color: orange;}
	    love-ha
	    顺序无影响： 
	     :link{color: blue;}
	     :visited{color: purple;}
	     :link:hover{color: red;}
	     :visited:hover{color: gray;}
	     :link:active{color: orange;}
	     :visited:active{color: silver;}
	     :link:hover:active{color: orange;}
	     :visited:hover:active{color: silver;}
第4章 值和单位
	1.数字
	2.百分数
	3.颜色
	 (1)命名颜色
	 (2)RGB
	  函数式RGB
	   rgb(100%,100%,100%)
	   rgb(0%,0%,0%)
	   rgb(255,255,255)
	   rgb(0,0,0)
	   h1{color: rgb(255,255,255);}
	   h2{color: rgb(25%,0%,100%);}
	   0%~100%
	   0~255
	  十六进制RGB
	   h1{color: #ffffff;}
	   h1{color: #903bc0;}
	   h3{color: #000000;}
	   h4{color: #808080;}
	   #RRGGBB 红绿蓝
	   h1{color: #000;}
	   h2{color: #666;}
	   h3{color: #fff;}
	   #RGB
	  Web安全颜色
	   百分数:能被20整除的数(0%,0%,0%) (20%,40%,60%) (40%,80%,100%)
	   255:能被51整除 (0,204,153) (255,0,102)
	   十六进制:00,33,66,99,CC,FF 	
	4.长度单位
	 0的时候后面不加单位
	 (1)绝对长度单位
	  in 英寸
	  cm
	  mm
	  pt 点
	  pc 派卡
	 (2)相对长度单位
	  em
	  ex 小写x的高度
	  px
	  h1{font-size: 24px;}
	  h2{font-size: 18px;}
	  p{font-size: 12px;}
	  h1,h2,p{margin-left: 1em;}
	  small{font-size: 0.8em;}
	  <h1>left margin=<small>24 pixels</small></h1>
	  <h2>left margin=<small>18 pixels</small></h2>
	  <p>left margin=<small>12 pixels</small></p>
	  1ex=0.5em
	5.URL
	 url(procotol://srever/pathname)
	 url(pathname) 无空格
	 <link rel="stylesheet" type="text/css" href="http://www.waffles.org/styles/basic.css">
	 @import url(special/toppings.css)
	 浏览器的查找位置是 http://www.waffles.org/styles/special/toppings.css
	 而不是 http://www.waffles.org/toppings/special/toppings.css
	6.关键字
	 描述值的词
	 a:link,a:visited{text-decoration: none;} none 不等于0
	 a:link,a:visited{text-decoration: underline;}
	  (1)inherit
	   #toolbar a{color: inherit;}
	7.CSS2单位
	 (1)角度值
	  度deg
	  梯度grad
	  弧度rad
	  直角：90deg 100grad 1.57rad
	  周角：360deg 400grad 6,28rad
	 (2)时间值
	  ms s
	  100ms=0.1s
	 (3)频率值
	  Hz MHz Mhz
	 URI(identifier) URL
第5章 字体
	1.通用字体系列
	 Serif：非等宽 上下短线Times,Georgia,New Century Schoolbook
	 Sans-serif:非等宽 Helvetica,Geneva,Verdana,Arial,Univers
	 Monospace:等宽 Courier,Courier New,Andale Mono
	 Cursive:手写体 Zapf Chancery,Author,Comics Sans
	 Fantasy:Western,Woodblock,Klingon
	2.使用
	 body{font-family: sans-serif;}
	 body{font-family: serif;}
	 h1,h2,h3,h4{font-family: sana-serif;}
	 code,pre,tt,span.input{font-family: monospace;}
	 p.signature{font-family: cursive;}
	3.指定字体系列
	 h1{font-family: Georgia;}
	 h1{font-family: Georgia,serif;}
	 p{font-family: Times,TimesNR,'New Century Schoolbook',Georgia,'New York',serif;}
	  使用引号：# $ % 空格 字体名
	4.字体加粗
	 b{font-weight: bold;}
	  9级加粗度：normal 400
	 p.one{font-weight: bold;}
	 lighter light normal bold bolder 相对值
	5.字体大小
	 font-size
	 p.one{font-size: xx-small;}
	 p.two{font-size: x-small;}
	 p.three{font-size: small;}
	 p.four{font-size: medium;}
	 p.five{font-size: large;}
	 p.six{font-size: x-large;}
	 p.seven{font-size: xx-large;}
	 百分数：相对于父元素的大小
	6.字体风格
	 font-style
	 italic 单独字体风格
	 oblique 字体倾斜过来
	 p{font-style: normal;}
	 em,i{font-style: italic;}
	 p{font-style: normal;}
	 em{font-style: oblique;}
	 i{font-style: italic;}
	 blockquote{font-style: italic;}
	 blockquote em,blockquote i{font-style: normal;}
	7.字体变形
	 非继承值
	 p{font-variant: small-caps;} 大写字母，更大的大写字母。小写字母，小的大写字母。
	 p{font-variant: normal;}
	8.拉伸和调整
	 strong{font-stretch: wider;}
	 font-size-adjust
	9.font属性
	 (1)font-family
	 font-weight
	 font-size
	 font-variant
	 font-style
	 h1{
	 	font-family: Verdana,Helvetica,Arial,sans-serif;
	 	font-size: 30px;
	 	font-weight: 900;
	 	font-style: italic;
	 	font-variant: small-caps;
	 }
	 h2{
	 	font-family: Verdana,Helvetica,Arial,sans-serif;
	 	font-size: 24px;
	 	font-weight: bold;
	 	font-style: italic;
	 	font-variant: normal;
	 }
	 h1{
	 	font: italic 900 small-caps 30px Verdana,Helvetica,Arial,sans-serif;
	 }
	 h2{
	 	font: bold normal italic 24px Verdana,Helvetica,Arial,sans-serif;
	 }
	 (2)font属性顺序：
	 任意排序+严格排序
	 任意排序：font-style font-variant font-weight
	 严格排序：font-size在前 font-family在后
	 (3)增加行高
	  line-height 作为font-size的补充值
	  h2{
	  	font: 200%/1.2
	  }
	  必须要有的值：font-size font-family
第6章 文本属性
	1.缩进
	 text-indent 对块级元素的第一行进行缩进
	 p{text-indent: 3em;}
	 p{text-indent: -4em;padding-left: 4em;}
	 div{width: 400px;}
	 p{text-indent: 10%;}
	 text-indent有继承属性
	 div#outer{width: 500px;}
	 div#inner{text-indent: 10%;}
	 p{width: 200px;}	 
	2.水平对齐
	 text-align
	 应用于块级元素 影响元素中的文字
	 <center></center>把整个块元素左移或者右移	 
	 p{text-align: left;}
	 p{text-align: justify;}两端对齐
	3.垂直对齐
	 line-height
	 继承
	 	body{font-size: 10px;}
	 	div{line-height: 1em;}
	 	p{font-size: 18px;}
	 缩放因子
	 	div{line-height: 1.5;}
	 	p{font-size: 18px;}
	 	此时行高是18px*1.5
	 垂直对齐文本
	  vertical-align
	  img{vertical-align: baseline;}
	  span.raise{vertical-align: sub;}
	  span.lower{vertical-align: super;}
	  .feeder{vertical-align: bottom;}
	  vertical-align: top;
	  vertical-align: text-top;
	  vertical-align: bottom;
	  vertical-align: text-bottom;
	  vertical-align: 50%;
	4.字间隔和字母间隔
	 (1)字间隔 word-spacing
	  p.spread{word-spacing: 0.5em;}
	  p.tight{word-spacing: -0.5em;}
	  p.base{word-spacing: normal;}
	  p.norm{word-spacing: 0;}
	 (2)字母间隔 
	  p{letter-spacing: 0;}
	  p.spacies{letter-spacing: 0.25em;}
	  p.tight{letter-spacing: -0.25em;}
	  strong{letter-spacing: 0.2em;}
	 (3)间隔和对齐
	  p{font-size: 20px;letter-spacing: 0.25em;}
	  small{font-size: 50%;letter-spacing: 0.25em;}
	5.文本转换
	 text-transform
	  h1{text-transform: uppercase;}
	  strong{text-transform: lowercase;}
	  p.cummings{text-transform: capitalize;}
	6.文本装饰
	 text-decoration
	  p.emph{text-decoration: underline;}
	  p{text-decoration: overline;}
	  p{text-decoration: line-through;}










附录：本书中需要区别对待的IE浏览器部分
1
2.IE不会忽略@import的任何指令






		

